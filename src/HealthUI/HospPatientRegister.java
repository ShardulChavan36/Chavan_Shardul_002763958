/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package HealthUI;

import Healthmodel.City;
import Healthmodel.Community;
import Healthmodel.House;
import Healthmodel.Patient;
import Healthmodel.PatientDirectory;
import Healthmodel.State;
import Healthmodel.VitalSignsHistory;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author chava
 */
public class HospPatientRegister extends javax.swing.JFrame {

    /**
     * Creates new form HospPatientRegister
     */
    VitalSignsHistory vitalDir;
    PatientDirectory patientDir;
    Community houseDir;
    public HospPatientRegister(PatientDirectory patientDir) {
        initComponents();
        this.patientDir=patientDir;
        if(houseDir == null){
            ArrayList<House> houseDir = new ArrayList<>();
        }
        else{
            this.houseDir = houseDir;
        }
        
        dropdownCity();
        dropdownCommunity();
        dropdownHouse();
        patientDispTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        patientName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        patientID = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel30 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        patientContact = new javax.swing.JTextField();
        genderCombo = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        patientState = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        patientZipCode = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        cityCombo = new javax.swing.JComboBox<>();
        communityCombo = new javax.swing.JComboBox<>();
        houseCombo = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        patientHeight = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        patientWeight = new javax.swing.JTextField();
        patientBloodGrp = new javax.swing.JComboBox<>();
        patientHomeBtn1 = new javax.swing.JButton();
        patientLogoutBtn1 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        patientRegisterBtn = new javax.swing.JButton();
        patientViewBtn = new javax.swing.JButton();
        patientUpdateBtn = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        patientEmailID = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        patientPassword = new javax.swing.JPasswordField();
        jPasswordField1 = new javax.swing.JPasswordField();
        jLabel20 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSeparator1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        patientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient ID", "Name", "Contact No", "Email ID", "Gender", "Age", "Community", "City", "Blood Group", "Height", "Weight"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(patientTable);

        jPanel2.setBackground(java.awt.SystemColor.activeCaption);
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Personal Details"));

        patientName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                patientNameKeyTyped(evt);
            }
        });

        jLabel2.setText("Name");

        jLabel3.setText("PatientID");

        patientID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientIDActionPerformed(evt);
            }
        });
        patientID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                patientIDKeyTyped(evt);
            }
        });

        jLabel5.setText("Gender");

        jLabel30.setText("DOB");

        jLabel4.setText("Contact");

        patientContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientContactActionPerformed(evt);
            }
        });
        patientContact.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                patientContactKeyTyped(evt);
            }
        });

        genderCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose Gender", "Male", "Female", "Other" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientID, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientName, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientContact, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel30)
                            .addComponent(jLabel5))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(genderCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(49, 49, 49))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(patientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(17, 17, 17)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel30))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(genderCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );

        jPanel3.setBackground(java.awt.SystemColor.activeCaption);
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Address Details"));

        jLabel7.setText("House");

        jLabel19.setText("Community");

        jLabel32.setText("State");

        jLabel12.setText("Zip Code");

        patientZipCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientZipCodeActionPerformed(evt);
            }
        });
        patientZipCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                patientZipCodeKeyTyped(evt);
            }
        });

        jLabel9.setText("City");

        cityCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cityCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cityComboItemStateChanged(evt);
            }
        });

        communityCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        communityCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                communityComboItemStateChanged(evt);
            }
        });

        houseCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel19))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(communityCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(houseCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(95, 95, 95))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(cityCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel32)
                        .addGap(18, 18, 18)
                        .addComponent(patientState, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(patientZipCode, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(houseCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel19)
                    .addComponent(communityCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(cityCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32))
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientZipCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addContainerGap())
        );

        jPanel4.setBackground(java.awt.SystemColor.activeCaption);
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Medical Details"));

        jLabel6.setText("BloodGrp");

        jLabel17.setText("Height");

        jLabel18.setText("Weight");

        patientBloodGrp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A+", "B+", "AB+", "O+", "O-", "A-", "B-" }));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(65, 65, 65)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(patientHeight, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                    .addComponent(patientWeight, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                    .addComponent(patientBloodGrp, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel17)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel18)
                        .addGap(4, 4, 4))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(patientBloodGrp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(patientHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(patientWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(70, Short.MAX_VALUE))
        );

        patientHomeBtn1.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.borderColor"));
        patientHomeBtn1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        patientHomeBtn1.setText("Home");
        patientHomeBtn1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        patientHomeBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientHomeBtn1ActionPerformed(evt);
            }
        });

        patientLogoutBtn1.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.borderColor"));
        patientLogoutBtn1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        patientLogoutBtn1.setText("Logout");
        patientLogoutBtn1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        patientLogoutBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientLogoutBtn1ActionPerformed(evt);
            }
        });

        jLabel8.setBackground(new java.awt.Color(0, 0, 0));
        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel8.setText("Patient Registration");

        patientRegisterBtn.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.borderColor"));
        patientRegisterBtn.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        patientRegisterBtn.setText("REGISTER");
        patientRegisterBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        patientRegisterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientRegisterBtnActionPerformed(evt);
            }
        });

        patientViewBtn.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.borderColor"));
        patientViewBtn.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        patientViewBtn.setText("View");
        patientViewBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        patientViewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientViewBtnActionPerformed(evt);
            }
        });

        patientUpdateBtn.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.borderColor"));
        patientUpdateBtn.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        patientUpdateBtn.setText("Update");
        patientUpdateBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        patientUpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientUpdateBtnActionPerformed(evt);
            }
        });

        jPanel5.setBackground(java.awt.SystemColor.activeCaption);
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Account Details"));

        patientEmailID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientEmailIDActionPerformed(evt);
            }
        });

        jLabel13.setText("Email ID");

        jLabel21.setText("Password");

        patientPassword.setText("jPasswordField1");
        patientPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientPasswordActionPerformed(evt);
            }
        });

        jPasswordField1.setText("jPasswordField1");

        jLabel20.setText("Re-Pswd");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(30, 30, 30)))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientEmailID, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(9, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientEmailID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(23, 23, 23)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(patientPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(patientHomeBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(259, 259, 259)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 284, Short.MAX_VALUE)
                        .addComponent(patientLogoutBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 821, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(66, 66, 66)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(patientViewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(42, 42, 42)
                                        .addComponent(patientRegisterBtn))
                                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(108, 108, 108)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(patientUpdateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(patientLogoutBtn1)
                    .addComponent(patientHomeBtn1))
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientViewBtn)
                    .addComponent(patientRegisterBtn)
                    .addComponent(patientUpdateBtn))
                .addGap(54, 54, 54)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1029, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
public void dropdownCity() {
            ArrayList<String> cityDropdown = new ArrayList<>();
            for (int i = 0; i < State.cityDir.size(); i++) {
                cityDropdown.add(State.cityDir.get(i).newCity);
            }

            String[] citySDropdown = cityDropdown.toArray(new String[cityDropdown.size()]);
            DefaultComboBoxModel<String> yearsSDropdownModel = new DefaultComboBoxModel<>(citySDropdown);
            cityCombo.setModel(yearsSDropdownModel);
        }
    
    public void dropdownCommunity() {
        ArrayList<String> communityDropdown = new ArrayList<>();
        String val;    
        if(cityCombo.getSelectedIndex() == -1){
            val = "";
        }
        else{
            val = cityCombo.getSelectedItem().toString();
        }
        City.communityDirectory.stream().filter(communityValue -> (communityValue.newCity == null ? val.equals("") : communityValue.newCity.equals(val))).forEachOrdered(communityValue -> {
                communityDropdown.add(String.valueOf(communityValue.communityName));
            });
        String[] communitySDropdown = communityDropdown.toArray(new String[communityDropdown.size()]);
        DefaultComboBoxModel<String> SDropdownModel = new DefaultComboBoxModel<>(communitySDropdown);
        this.communityCombo.setModel(SDropdownModel);
        
        
    }
    
    public void dropdownHouse(){
        
        ArrayList<String> houseDropdown = new ArrayList<>();
        String val;
        if(communityCombo.getSelectedIndex() == -1){
            val = "";
        }
        else{
            val = communityCombo.getSelectedItem().toString();
        }
        
        Community.houseDir.stream().filter(houseValue -> (houseValue.communityName == null ? val.equals("") : houseValue.communityName.equals(val))).forEachOrdered(houseValue -> {
            houseDropdown.add(String.valueOf(houseValue.getHouseNo()));
        });
        String[] houseSDropdown = houseDropdown.toArray(new String[houseDropdown.size()]);
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(houseSDropdown);
        this.houseCombo.setModel(model);
        
    }
    private void patientNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patientNameKeyTyped
        char typedName = evt.getKeyChar();
        if(!Character.isAlphabetic(typedName) && !Character.isWhitespace(typedName)){
            evt.consume();
        }
        //Restrict the length to 256
        if(patientName.getText().length() > 100){
            evt.consume();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_patientNameKeyTyped

    private void patientIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientIDActionPerformed

    private void patientIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patientIDKeyTyped
        // TODO add your handling code here:
        char typedPatientID = evt.getKeyChar();
        if(!Character.isDigit(typedPatientID)){
            evt.consume();
        }

        if(patientID.getText().length() > 5){
            evt.consume();
        }

    }//GEN-LAST:event_patientIDKeyTyped

    private void patientContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientContactActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientContactActionPerformed

    private void patientContactKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patientContactKeyTyped
        char typedContactNumber = evt.getKeyChar();
        if(!Character.isDigit(typedContactNumber)){
            evt.consume();
        }
        //Restrict the length to 10
        if(patientContact.getText().length() == 10){
            evt.consume();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_patientContactKeyTyped

    private void patientZipCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientZipCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientZipCodeActionPerformed

    private void patientZipCodeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patientZipCodeKeyTyped
        try{
            //Allow only digits in Zip field
            char typedZipCode = evt.getKeyChar();
            if(!Character.isDigit(typedZipCode)){
                evt.consume();
            }
            //Restrict the length to 5
            if(patientZipCode.getText().length() > 4){
                evt.consume();
            }
        }catch(Exception e){
            System.out.println(e);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_patientZipCodeKeyTyped

    private void cityComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cityComboItemStateChanged
        // TODO add your handling code here:
        dropdownCommunity();
    }//GEN-LAST:event_cityComboItemStateChanged

    private void communityComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_communityComboItemStateChanged
        // TODO add your handling code here:
        dropdownHouse();
    }//GEN-LAST:event_communityComboItemStateChanged

    private void patientHomeBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientHomeBtn1ActionPerformed
        // TODO add your handling code here:

        MainFrame newMainFrame = new MainFrame();
        newMainFrame.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_patientHomeBtn1ActionPerformed

    private void patientLogoutBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientLogoutBtn1ActionPerformed
        // TODO add your handling code here:

        LoginFrame newLoginPage = new LoginFrame();
        newLoginPage.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_patientLogoutBtn1ActionPerformed

    private void patientRegisterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientRegisterBtnActionPerformed
        // TODO add your handling code here:
        if(validation()){
            Patient patient=new Patient();
            patient.setName(patientName.getText());
            patient.setPatientId(Integer.parseInt(patientID.getText()));
            //        pt1.person.setAge(Integer.parseInt(patientAge.getText()));
            patient.setContactNo(Long.parseLong(patientID.getText()));
            patient.setGender((String)genderCombo.getSelectedItem());
            //        Patient Address Details
            patient.residence.setCommunityName((String)communityCombo.getSelectedItem());
            patient.residence.houseNo=(Integer.parseInt(houseCombo.getSelectedItem().toString()));
            //        System.out.println((Integer)houseCombo.getSelectedItem());
            patient.residence.zip = Integer.parseInt(patientZipCode.getText());
            patient.residence.setNewCity((String)cityCombo.getSelectedItem());
            patient.residence.state = patientState.getText();

            //        Patient Emailid & Pwd Details
            patient.setEmailId(patientEmailID.getText());
            String patient_pwd=new String(patientPassword.getPassword());
            patient.setPatientpwd(patient_pwd);

            patient.setBloodGroup((String)patientBloodGrp.getSelectedItem());
            patient.setPatientHeight(Float.parseFloat(patientHeight.getText()));
            patient.setPatientWeight(Float.parseFloat(patientWeight.getText()));

            PatientDirectory.patientDir.add(patient);
            JOptionPane.showMessageDialog(this, "Person Successfully Added");
            patientDispTable();

            clearPatientForm();
        }

    }//GEN-LAST:event_patientRegisterBtnActionPerformed

    private void patientViewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientViewBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex1=patientTable.getSelectedRow();
        if (selectedRowIndex1<0){
            JOptionPane.showMessageDialog(this,"Please select a row to delete");
            return;
        }
        DefaultTableModel model1 = (DefaultTableModel) patientTable.getModel();
        Patient selectedPatient=(Patient)model1.getValueAt(selectedRowIndex1,0);
        patientName.setText(selectedPatient.getName());
        patientID.setText(String.valueOf(selectedPatient.getPatientId()));
        patientContact.setText(String.valueOf(selectedPatient.getContactNo()));
        houseCombo.setSelectedItem(String.valueOf(selectedPatient.residence.getHouseNo()));
        patientEmailID.setText(selectedPatient.getEmailId());
        communityCombo.setSelectedItem(selectedPatient.residence.getCommunityName());

        genderCombo.setSelectedItem(selectedPatient.getGender());
        patientBloodGrp.setSelectedItem(selectedPatient.getBloodGroup());
        cityCombo.setSelectedItem(selectedPatient.residence.getNewCity());
        patientState.setText(selectedPatient.residence.getState());
        patientZipCode.setText(String.valueOf(selectedPatient.residence.getZip()));

        patientHeight.setText(String.valueOf(selectedPatient.getPatientHeight()));
        patientWeight.setText(String.valueOf(selectedPatient.getPatientWeight()));

    }//GEN-LAST:event_patientViewBtnActionPerformed

    private void patientUpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientUpdateBtnActionPerformed
        // TODO add your handling code here:
        if(validation()){
            int selectedRowIndex1=patientTable.getSelectedRow();
            DefaultTableModel model1 = (DefaultTableModel) patientTable.getModel();
            Patient selectedPatient=(Patient)model1.getValueAt(selectedRowIndex1,0);
            selectedPatient.setName(patientName.getText());

            //        pt1.person.setAge(Integer.parseInt(patientAge.getText()));
            selectedPatient.setContactNo(Long.parseLong(patientContact.getText()));
            selectedPatient.setEmailId(patientEmailID.getText());
            selectedPatient.setGender((String)genderCombo.getSelectedItem());
            selectedPatient.residence.setCommunityName((String)communityCombo.getSelectedItem());
            selectedPatient.residence.setHouseNo((Integer.parseInt(houseCombo.getSelectedItem().toString())));
            selectedPatient.residence.zip = Integer.parseInt(patientZipCode.getText());
            selectedPatient.residence.setNewCity((String)cityCombo.getSelectedItem());
            selectedPatient.residence.state = patientState.getText();
            selectedPatient.setPatientId(Integer.parseInt(patientID.getText()));

            String patient_pwd=new String(patientPassword.getPassword());
            selectedPatient.setPatientpwd(patient_pwd);

            JOptionPane.showMessageDialog(this, "Person Successfully Updated");
            patientDispTable();
        }
    }//GEN-LAST:event_patientUpdateBtnActionPerformed

    private void patientEmailIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientEmailIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientEmailIDActionPerformed

    private void patientPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientPasswordActionPerformed
    public void patientDispTable(){
        DefaultTableModel model1 = (DefaultTableModel) patientTable.getModel();
        model1.setRowCount(0);
        System.out.println("Done");
        for (Patient patient:PatientDirectory.getPatientDir()){
            Object[] row=new Object[12];
            row[0]=patient;
            row[1]=patient.getName();
            row[2]=patient.getContactNo();
            row[3]=patient.getEmailId();
            row[4]=patient.getGender();
            row[5]=patient.getAge();
            row[6]=patient.residence.getCommunityName();
            row[7]=patient.residence.getNewCity();
            row[8]=patient.getBloodGroup();
            row[9]=patient.getPatientHeight();
            row[10]=patient.getPatientWeight();
            row[11]=patient.residence.getState();
            
            model1.addRow(row);
        }
    }
    boolean validation(){
        String id, name, emailId, gender, community, city, state, username ;
        String houseNumber, zipCode, age, bloodGroup, height, weight;
        String contactDetails;
        Date dob;
        //String patternEmail = "^[A-Za-z0-9+_.-]+@(.+)$";
        String patternEmail = "^[(a-zA-Z-0-9-\\_\\+\\.)]+@[(a-z-A-z)]+\\.[(a-zA-z)]{2,3}$";
        String bmi = "[(0-9\\.)]{2,}$";
               
        id = patientID.getText();
        name = patientName.getText();
        emailId = patientEmailID.getText();
        contactDetails = patientContact.getText();
//        age = ageTxt.getText();
        dob = jDateChooser1.getDate();
        houseNumber = (String)houseCombo.getSelectedItem();
        community = (String)communityCombo.getSelectedItem();
        city = (String)cityCombo.getSelectedItem();
        state = patientState.getText();
        zipCode = patientZipCode.getText();
        //bloodGroup = (String) patientBloodGroupTxt.getSelectedItem();
        weight = patientWeight.getText();
        height = patientHeight.getText();
        String password = new String(patientPassword.getPassword());
        String rePassword = new String(jPasswordField1.getPassword());
       
        if (id.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please enter Patient ID");
            return false;
        }
       
        if (name.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please enter name");
            return false;
        }
       
        if (contactDetails.equals("") || !(patientContact.getText().length()==10))
        {
            JOptionPane.showMessageDialog(this, "Please enter valid contact Number");
            patientContact.setText("");
           
            return false;
        }
        //emailIDTxt.getText().isBlank() &&
        if( !patientEmailID.getText().matches(patternEmail)){
                JOptionPane.showMessageDialog(this, "Please enter a valid Email.");
                patientEmailID.setText("");
                return false;
            }
       
//        if (age.equals(""))
//        {
//            JOptionPane.showMessageDialog(this, "Please enter age");
//            return false;
//        }
       
        if (dob.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please enter Date of BIrth");
            return false;
        }
       
        if (houseNumber.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please enter houseNumber");
            return false;
        }
       
        if (community.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please enter community");
            return false;
        }
       
        if (city.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please enter city");
            return false;
        }
       
        if (state.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please enter state");
            return false;
        }
       
        if (zipCode.equals("") || !(patientZipCode.getText().length()==5))
        {
            JOptionPane.showMessageDialog(this, "Please enter zipCode");
            patientZipCode.setText("");
            return false;
        }
       
//        if (bloodGroup.equals(""))
//        {
//            JOptionPane.showMessageDialog(this, "Please enter bloodGroup");
//            return false;
//        }
       
//        if (height.equals("") )
//        {
//            JOptionPane.showMessageDialog(this, "Please enter height");
//            return false;
//        }
       
        if( height.equals("") || !patientHeight.getText().matches(bmi)){
                JOptionPane.showMessageDialog(this, "Please enter a valid height.");
                patientHeight.setText("");
                return false;
            }
       
       
//        if (weight.equals(""))
//        {
//            JOptionPane.showMessageDialog(this, "Please enter weight");
//            return false;
//        }
       
        if( weight.equals("") || !patientWeight.getText().matches(bmi)){
                JOptionPane.showMessageDialog(this, "Please enter a valid weight.");
                patientWeight.setText("");
                return false;
            }
      
   
       
        if (password.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please enter password");
            return false;
        }
       
        if (rePassword.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please enter rePassword");
            return false;
        }
       
        if (!(password).equals(rePassword)){
            JOptionPane.showMessageDialog(this, "Password doesn't match");
            return false;
        }
       
        return true;
       
    }
    public void clearPatientForm(){
        
        patientName.setText("");
        patientID.setText("");
        patientContact.setText("");
        genderCombo.setSelectedItem(" ");
       
       
        houseCombo.setSelectedIndex(-1);
        communityCombo.setSelectedIndex(-1);
        cityCombo.setSelectedIndex(-1);
        patientState.setText("");
        patientZipCode.setText("");
       
        patientBloodGrp.setSelectedItem("");
        
        patientHeight.setText("");
        patientWeight.setText("");
       
        patientPassword.setText("");
        jPasswordField1.setText("");
    }
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(HospPatientRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(HospPatientRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(HospPatientRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(HospPatientRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new HospPatientRegister(PatientDirectory patientDir).setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cityCombo;
    private javax.swing.JComboBox<String> communityCombo;
    private javax.swing.JComboBox<String> genderCombo;
    private javax.swing.JComboBox<String> houseCombo;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JComboBox<String> patientBloodGrp;
    private javax.swing.JTextField patientContact;
    private javax.swing.JTextField patientEmailID;
    private javax.swing.JTextField patientHeight;
    private javax.swing.JButton patientHomeBtn1;
    private javax.swing.JTextField patientID;
    private javax.swing.JButton patientLogoutBtn1;
    private javax.swing.JTextField patientName;
    private javax.swing.JPasswordField patientPassword;
    private javax.swing.JButton patientRegisterBtn;
    private javax.swing.JTextField patientState;
    private javax.swing.JTable patientTable;
    private javax.swing.JButton patientUpdateBtn;
    private javax.swing.JButton patientViewBtn;
    private javax.swing.JTextField patientWeight;
    private javax.swing.JTextField patientZipCode;
    // End of variables declaration//GEN-END:variables
}
